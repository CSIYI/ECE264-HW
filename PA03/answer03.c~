#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include "answer03.h"

char * strcat_ex (char * * dest, int * n, const char * src)
{
  int len_s;
  int len_d;
  char * new;
 
  
  len_s = strlen(src);
     
  if ( *dest == NULL)  
  { 
    * dest =malloc((1 + 2*len_s)*sizeof(char *));
    * dest[0] = '\0';
    strcpy(* dest, src);
  
    *n = 1+ 2*len_s;
    return(*dest);
  }
  len_d = strlen(* dest);  
  if (*n < (len_s + len_d + 1))
  {

    new = malloc((1 + 2*(len_d + len_s))*sizeof(char));
    new[0] = '\0';
    strcpy(new, *dest);            
    *n = 1 + 2*(len_d + len_s);
    free(*dest);
    *dest = new;
    strcat(*dest, src);
  }   
  else 
  {
     strcat(*dest, src);
     
  }
  return(*dest);
}


char * new_str(const char * s, int last, int len)
{
  char * str = malloc((len+1) * sizeof(char));
  memcpy(str, str + last, len);
  str[len] = '\0';
  return str; 
}

char * * explode(const char * str, const char * delims, int * arrLen)
{
   int n = 0; 
   int num = 0;
   while(str[num] != '\0')
   {
     if(strchr(delims, str[num]) != NULL)
     {
       n++;
     }
     num++;
   }
   char * * strArr = malloc((n + 1) * sizeof(char *));  
   int ind ;
   int arrInd = 0;
   int last = 0;
   for (ind = 0 ; ind < strlen(str); ind++)
   {
      if (strchr(delims, str[ind]) != NULL)
      {  
         strArr[arrInd++] = new_str(str, last, ind - last);
         last= ind + 1;
       }                 
   }
   strArr[arrInd]=new_str(str, last, ind-last);
   * arrLen = n + 1;
   return(strArr);
}
              
char  *implode (char * * strArr, int len, const char * glue)
{ 
   
 return;
}
void sortStringArray(char * * arrString, int len)
{return;}
void sortStringCharacters(char * str)
{return;}
void destroyStringArray(char * * strArr, int len)
{return;}


 
