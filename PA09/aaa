   ---------------------------------------------------------------------------
   Welcome to the PA09 testing program. This program takes a _long_ time
   to execute. There is a reason for this. You should not rely on this
   program to test your code as you go. Instead, you should think about
   what your code should be doing, and what inputs should produce what
   outputs for each of your functions.
   
        YOU SHOULD THEN TEST EVERY PIECE OF CODE AS YOU WRITE IT 
   
                                 AND 
   
                        FIX MISTAKES AS YOU GO.
   
   When you are convinced that you have the entire assignment 100%% correct,
   then you can use this testing program to test it. 
   
   This will give you your mark assuming that you submit it correctly, and 
   there are no other irregularities.
   ---------------------------------------------------------------------------

test 1 :: passing incorrect filename to load_tree_from_file()

	char * filename = "carzyfilename";
	BusinessNode * root;
	root = load_tree_from_file(filename);

Memory errors detected, testcase failed.
==11381== Memcheck, a memory error detector
==11381== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==11381== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==11381== Command: /tmp/.rvsvEz/a.out 0
==11381== Parent PID: 11380
==11381== 
--11381-- 
--11381-- Valgrind options:
--11381--    --tool=memcheck
--11381--    --leak-check=full
--11381--    --verbose
--11381--    --log-file=memcheck.log
--11381-- Contents of /proc/version:
--11381--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--11381-- Arch and hwcaps: AMD64, amd64-sse3
--11381-- Page sizes: currently 4096, max supported 4096
--11381-- Valgrind library directory: /usr/lib64/valgrind
--11381-- Reading syms from /tmp/.rvsvEz/a.out
--11381-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--11381--    object doesn't have a dynamic symbol table
--11381-- Reading syms from /lib64/ld-2.12.so
--11381-- Scheduler: using generic scheduler lock implementation.
--11381-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==11381== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-11381-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==11381== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-11381-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==11381== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-11381-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==11381== 
==11381== TO CONTROL THIS PROCESS USING vgdb (which you probably
==11381== don't want to do, unless you know exactly what you're doing,
==11381== or are doing some strange experiment):
==11381==   /usr/lib64/valgrind/../../bin/vgdb --pid=11381 ...command...
==11381== 
==11381== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==11381==   /path/to/gdb /tmp/.rvsvEz/a.out
==11381== and then give GDB the following command
==11381==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=11381
==11381== --pid is optional if only one valgrind process is running
==11381== 
--11381-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--11381-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--11381-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--11381-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--11381-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--11381-- Reading syms from /lib64/libc-2.12.so
--11381-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--11381-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--11381-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--11381-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--11381-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--11381-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--11381-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--11381-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
==11381== Invalid read of size 4
==11381==    at 0x3822A66CAD: fgets (in /lib64/libc-2.12.so)
==11381==    by 0x401F91: load_tree_from_file (answer09.c:81)
==11381==    by 0x401073: test_fileopen (<stdin>:211)
==11381==    by 0x401AC0: main (<stdin>:422)
==11381==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==11381== 
==11381== 
==11381== Process terminating with default action of signal 11 (SIGSEGV)
==11381==  Access not within mapped region at address 0x0
==11381==    at 0x3822A66CAD: fgets (in /lib64/libc-2.12.so)
==11381==    by 0x401F91: load_tree_from_file (answer09.c:81)
==11381==    by 0x401073: test_fileopen (<stdin>:211)
==11381==    by 0x401AC0: main (<stdin>:422)
==11381==  If you believe this happened as a result of a stack
==11381==  overflow in your program's main thread (unlikely but
==11381==  possible), you can try to increase the size of the
==11381==  main thread stack using the --main-stacksize= flag.
==11381==  The main thread stack size used in this run was 10485760.
==11381== 
==11381== HEAP SUMMARY:
==11381==     in use at exit: 0 bytes in 0 blocks
==11381==   total heap usage: 1 allocs, 1 frees, 568 bytes allocated
==11381== 
==11381== All heap blocks were freed -- no leaks are possible
==11381== 
==11381== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==11381== 
==11381== 1 errors in context 1 of 1:
==11381== Invalid read of size 4
==11381==    at 0x3822A66CAD: fgets (in /lib64/libc-2.12.so)
==11381==    by 0x401F91: load_tree_from_file (answer09.c:81)
==11381==    by 0x401073: test_fileopen (<stdin>:211)
==11381==    by 0x401AC0: main (<stdin>:422)
==11381==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==11381== 
--11381-- 
--11381-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--11381-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==11381== 
==11381== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 2 :: testing destroy_tree()

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	destroy_tree(root);

   (pass.)
Memory errors detected, testcase failed.
==12383== Memcheck, a memory error detector
==12383== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==12383== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==12383== Command: /tmp/.rvsvEz/a.out 1
==12383== Parent PID: 12381
==12383== 
--12383-- 
--12383-- Valgrind options:
--12383--    --tool=memcheck
--12383--    --leak-check=full
--12383--    --verbose
--12383--    --log-file=memcheck.log
--12383-- Contents of /proc/version:
--12383--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--12383-- Arch and hwcaps: AMD64, amd64-sse3
--12383-- Page sizes: currently 4096, max supported 4096
--12383-- Valgrind library directory: /usr/lib64/valgrind
--12383-- Reading syms from /tmp/.rvsvEz/a.out
--12383-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--12383--    object doesn't have a dynamic symbol table
--12383-- Reading syms from /lib64/ld-2.12.so
--12383-- Scheduler: using generic scheduler lock implementation.
--12383-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==12383== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-12383-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==12383== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-12383-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==12383== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-12383-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==12383== 
==12383== TO CONTROL THIS PROCESS USING vgdb (which you probably
==12383== don't want to do, unless you know exactly what you're doing,
==12383== or are doing some strange experiment):
==12383==   /usr/lib64/valgrind/../../bin/vgdb --pid=12383 ...command...
==12383== 
==12383== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==12383==   /path/to/gdb /tmp/.rvsvEz/a.out
==12383== and then give GDB the following command
==12383==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=12383
==12383== --pid is optional if only one valgrind process is running
==12383== 
--12383-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--12383-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--12383-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--12383-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--12383-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--12383-- Reading syms from /lib64/libc-2.12.so
--12383-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--12383-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--12383-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--12383-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--12383-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--12383-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--12383-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--12383-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--12383-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--12383-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--12383-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--12383-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--12383-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--12383-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
==12383== 
==12383== HEAP SUMMARY:
==12383==     in use at exit: 2,967,418 bytes in 126,459 blocks
==12383==   total heap usage: 210,767 allocs, 84,308 frees, 5,667,826 bytes allocated
==12383== 
==12383== Searching for pointers to 126,459 not-freed blocks
==12383== Checked 64,696 bytes
==12383== 
==12383== 969,688 bytes in 84,306 blocks are definitely lost in loss record 1 of 2
==12383==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==12383==    by 0x400AE0: explode_sol (<stdin>:53)
==12383==    by 0x400D8A: load_tree_from_file_sol (<stdin>:117)
==12383==    by 0x40110F: test_destroy (<stdin>:225)
==12383==    by 0x401ACF: main (<stdin>:423)
==12383== 
==12383== 1,997,730 bytes in 42,153 blocks are definitely lost in loss record 2 of 2
==12383==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==12383==    by 0x400B7B: explode_sol (<stdin>:64)
==12383==    by 0x400D8A: load_tree_from_file_sol (<stdin>:117)
==12383==    by 0x40110F: test_destroy (<stdin>:225)
==12383==    by 0x401ACF: main (<stdin>:423)
==12383== 
==12383== LEAK SUMMARY:
==12383==    definitely lost: 2,967,418 bytes in 126,459 blocks
==12383==    indirectly lost: 0 bytes in 0 blocks
==12383==      possibly lost: 0 bytes in 0 blocks
==12383==    still reachable: 0 bytes in 0 blocks
==12383==         suppressed: 0 bytes in 0 blocks
==12383== 
==12383== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 6 from 6)
--12383-- 
--12383-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--12383-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==12383== 
==12383== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 6 from 6)

test 3 :: testing destroy_tree() when root is NULL

	BusinessNode * root = NULL
	destroy_tree(root);

   (pass.)

test 4 :: testing whether the tree is built correctly

	BusinessNode * tree = load_tree_from_file("yelp_businesses.tsv");
	compare_trees(tree, sol_tree);
Memory errors detected, testcase failed.
==15732== Memcheck, a memory error detector
==15732== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==15732== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==15732== Command: /tmp/.rvsvEz/a.out 3
==15732== Parent PID: 15729
==15732== 
--15732-- 
--15732-- Valgrind options:
--15732--    --tool=memcheck
--15732--    --leak-check=full
--15732--    --verbose
--15732--    --log-file=memcheck.log
--15732-- Contents of /proc/version:
--15732--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--15732-- Arch and hwcaps: AMD64, amd64-sse3
--15732-- Page sizes: currently 4096, max supported 4096
--15732-- Valgrind library directory: /usr/lib64/valgrind
--15732-- Reading syms from /tmp/.rvsvEz/a.out
--15732-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--15732--    object doesn't have a dynamic symbol table
--15732-- Reading syms from /lib64/ld-2.12.so
--15732-- Scheduler: using generic scheduler lock implementation.
--15732-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==15732== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-15732-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==15732== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-15732-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==15732== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-15732-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==15732== 
==15732== TO CONTROL THIS PROCESS USING vgdb (which you probably
==15732== don't want to do, unless you know exactly what you're doing,
==15732== or are doing some strange experiment):
==15732==   /usr/lib64/valgrind/../../bin/vgdb --pid=15732 ...command...
==15732== 
==15732== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==15732==   /path/to/gdb /tmp/.rvsvEz/a.out
==15732== and then give GDB the following command
==15732==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=15732
==15732== --pid is optional if only one valgrind process is running
==15732== 
--15732-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--15732-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--15732-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--15732-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--15732-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--15732-- Reading syms from /lib64/libc-2.12.so
--15732-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--15732-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--15732-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--15732-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--15732-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--15732-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--15732-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--15732-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--15732-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--15732-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--15732-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--15732-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--15732-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--15732-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
==15732== Use of uninitialised value of size 8
==15732==    at 0x3822A67EE0: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid write of size 1
==15732==    at 0x3822A67EE0: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid write of size 1
==15732==    at 0x4A08D28: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b8c9 is 73 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid write of size 8
==15732==    at 0x4A08D53: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b8c0 is 64 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid write of size 2
==15732==    at 0x4A08DB4: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b886 is 6 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid write of size 1
==15732==    at 0x4A08DEF: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b881 is 1 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x3822A66D2C: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Use of uninitialised value of size 8
==15732==    at 0x3822A66D86: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid write of size 1
==15732==    at 0x3822A66D86: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b8ca is 74 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x401F95: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Use of uninitialised value of size 8
==15732==    at 0x401C8D: explode (answer09.c:18)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid read of size 1
==15732==    at 0x401C8D: explode (answer09.c:18)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Use of uninitialised value of size 8
==15732==    at 0x401C63: explode (answer09.c:20)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid read of size 1
==15732==    at 0x401C63: explode (answer09.c:20)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
--15732-- REDIR: 0x3822a81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A07FB2: __GI_strlen (mc_replace_strmem.c:404)
==15732==    by 0x401D33: explode (answer09.c:30)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid read of size 1
==15732==    at 0x4A07FB2: __GI_strlen (mc_replace_strmem.c:404)
==15732==    by 0x401D33: explode (answer09.c:30)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A07FC4: __GI_strlen (mc_replace_strmem.c:404)
==15732==    by 0x401D33: explode (answer09.c:30)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid read of size 1
==15732==    at 0x4A07FC4: __GI_strlen (mc_replace_strmem.c:404)
==15732==    by 0x401D33: explode (answer09.c:30)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b881 is 1 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Use of uninitialised value of size 8
==15732==    at 0x401CCC: explode (answer09.c:32)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid read of size 1
==15732==    at 0x401CCC: explode (answer09.c:32)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08B79: memcpy (mc_replace_strmem.c:128)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08B8C: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08BD9: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08CEE: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D03: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D09: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A08D21: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid read of size 1
==15732==    at 0x4A08D21: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b882 is 2 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D2A: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A08DEC: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid read of size 1
==15732==    at 0x4A08DEC: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b894 is 20 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08B79: memcpy (mc_replace_strmem.c:128)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08B8C: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08BD9: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08CEE: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D03: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D85: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A08DAC: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid read of size 2
==15732==    at 0x4A08DAC: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b8c8 is 72 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== Invalid write of size 2
==15732==    at 0x4A08C8C: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==15732== 
==15732== 
==15732== Process terminating with default action of signal 11 (SIGSEGV)
==15732==  Access not within mapped region at address 0x0
==15732==    at 0x4A08C8C: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  If you believe this happened as a result of a stack
==15732==  overflow in your program's main thread (unlikely but
==15732==  possible), you can try to increase the size of the
==15732==  main thread stack using the --main-stacksize= flag.
==15732==  The main thread stack size used in this run was 10485760.
==15732== 
==15732== HEAP SUMMARY:
==15732==     in use at exit: 4,654,186 bytes in 168,615 blocks
==15732==   total heap usage: 210,774 allocs, 42,159 frees, 5,668,573 bytes allocated
==15732== 
==15732== Searching for pointers to 168,615 not-freed blocks
==15732== Checked 4,253,328 bytes
==15732== 
==15732== LEAK SUMMARY:
==15732==    definitely lost: 0 bytes in 0 blocks
==15732==    indirectly lost: 0 bytes in 0 blocks
==15732==      possibly lost: 0 bytes in 0 blocks
==15732==    still reachable: 4,654,186 bytes in 168,615 blocks
==15732==         suppressed: 0 bytes in 0 blocks
==15732== Reachable blocks (those to which a pointer was found) are not shown.
==15732== To see them, rerun with: --leak-check=full --show-reachable=yes
==15732== 
==15732== Use --track-origins=yes to see where uninitialised values come from
==15732== ERROR SUMMARY: 11789 errors from 40 contexts (suppressed: 6 from 6)
==15732== 
==15732== 1 errors in context 1 of 40:
==15732== Invalid write of size 2
==15732==    at 0x4A08C8C: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==15732== 
==15732== 
==15732== 1 errors in context 2 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D85: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 3 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D03: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 4 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08CEE: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 5 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08BD9: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 6 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08B8C: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 7 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08B79: memcpy (mc_replace_strmem.c:128)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 8 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A08DEC: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 9 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D09: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 10 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x401F95: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 11 of 40:
==15732== Invalid write of size 1
==15732==    at 0x3822A66D86: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b8ca is 74 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 12 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x3822A66D86: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 13 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x3822A66D2C: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 14 of 40:
==15732== Invalid write of size 1
==15732==    at 0x4A08DEF: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b881 is 1 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 15 of 40:
==15732== Invalid write of size 1
==15732==    at 0x3822A67EE0: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 1 errors in context 16 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x3822A67EE0: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 2 errors in context 17 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A08DAC: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 2 errors in context 18 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D03: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 2 errors in context 19 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08CEE: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 2 errors in context 20 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08BD9: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 2 errors in context 21 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08B8C: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 2 errors in context 22 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08B79: memcpy (mc_replace_strmem.c:128)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 2 errors in context 23 of 40:
==15732== Invalid write of size 1
==15732==    at 0x4A08D28: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b8c9 is 73 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 3 errors in context 24 of 40:
==15732== Conditional jump or move depends on uninitialised value(s)
==15732==    at 0x4A08D2A: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 3 errors in context 25 of 40:
==15732== Invalid read of size 1
==15732==    at 0x4A08D21: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b882 is 2 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 3 errors in context 26 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A08D21: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 3 errors in context 27 of 40:
==15732== Invalid write of size 2
==15732==    at 0x4A08DB4: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b886 is 6 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 8 errors in context 28 of 40:
==15732== Invalid write of size 8
==15732==    at 0x4A08D53: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x3822A67F3C: _IO_getline_info (in /lib64/libc-2.12.so)
==15732==    by 0x3822A66D28: fgets (in /lib64/libc-2.12.so)
==15732==    by 0x401F91: load_tree_from_file (answer09.c:81)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b8c0 is 64 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 17 errors in context 29 of 40:
==15732== Invalid read of size 1
==15732==    at 0x4A08DEC: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D0D: explode (answer09.c:34)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b894 is 20 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 26 errors in context 30 of 40:
==15732== Invalid read of size 2
==15732==    at 0x4A08DAC: memcpy (mc_replace_strmem.c:882)
==15732==    by 0x401C22: new_str (answer09.c:9)
==15732==    by 0x401D61: explode (answer09.c:39)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b8c8 is 72 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 74 errors in context 31 of 40:
==15732== Invalid read of size 1
==15732==    at 0x401CCC: explode (answer09.c:32)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 74 errors in context 32 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x401CCC: explode (answer09.c:32)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 74 errors in context 33 of 40:
==15732== Invalid read of size 1
==15732==    at 0x401C63: explode (answer09.c:20)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 74 errors in context 34 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x401C63: explode (answer09.c:20)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 75 errors in context 35 of 40:
==15732== Invalid read of size 1
==15732==    at 0x4A07FB2: __GI_strlen (mc_replace_strmem.c:404)
==15732==    by 0x401D33: explode (answer09.c:30)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 75 errors in context 36 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A07FB2: __GI_strlen (mc_replace_strmem.c:404)
==15732==    by 0x401D33: explode (answer09.c:30)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 75 errors in context 37 of 40:
==15732== Invalid read of size 1
==15732==    at 0x401C8D: explode (answer09.c:18)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b880 is 0 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 75 errors in context 38 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x401C8D: explode (answer09.c:18)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 5550 errors in context 39 of 40:
==15732== Invalid read of size 1
==15732==    at 0x4A07FC4: __GI_strlen (mc_replace_strmem.c:404)
==15732==    by 0x401D33: explode (answer09.c:30)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732==  Address 0x4d3b881 is 1 bytes inside a block of size 568 free'd
==15732==    at 0x4A06430: free (vg_replace_malloc.c:446)
==15732==    by 0x3822A664CC: fclose@@GLIBC_2.2.5 (in /lib64/libc-2.12.so)
==15732==    by 0x400DF7: load_tree_from_file_sol (<stdin>:125)
==15732==    by 0x4014DF: test_build (<stdin>:311)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
==15732== 
==15732== 5550 errors in context 40 of 40:
==15732== Use of uninitialised value of size 8
==15732==    at 0x4A07FC4: __GI_strlen (mc_replace_strmem.c:404)
==15732==    by 0x401D33: explode (answer09.c:30)
==15732==    by 0x401EE4: load_tree_from_file (answer09.c:83)
==15732==    by 0x4014ED: test_build (<stdin>:312)
==15732==    by 0x401AED: main (<stdin>:425)
==15732== 
--15732-- 
--15732-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--15732-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==15732== 
==15732== ERROR SUMMARY: 11789 errors from 40 contexts (suppressed: 6 from 6)

test 5 :: testing the create_node function.

	BusinessNode * node = create_node(strdup("5.0"), strdup("Purdue University Electrical Engineering"), strdup("465 Northwestern Avenue")
   (pass.)

test 7 :: testing the tree_insert function: insert to NULL root.

	BusinessNode * root = NULL;
	BusinessNode * node = create_node(strdup("5.0"),strdup("test node"),strdup("no address"));
	BusinessNode * root = tree_insert(node,root);
   // Error, Root is not equal to node

   Testcase FAILED
Memory errors detected, testcase failed.
==22371== Memcheck, a memory error detector
==22371== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==22371== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==22371== Command: /tmp/.rvsvEz/a.out 6
==22371== Parent PID: 22368
==22371== 
--22371-- 
--22371-- Valgrind options:
--22371--    --tool=memcheck
--22371--    --leak-check=full
--22371--    --verbose
--22371--    --log-file=memcheck.log
--22371-- Contents of /proc/version:
--22371--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--22371-- Arch and hwcaps: AMD64, amd64-sse3
--22371-- Page sizes: currently 4096, max supported 4096
--22371-- Valgrind library directory: /usr/lib64/valgrind
--22371-- Reading syms from /tmp/.rvsvEz/a.out
--22371-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--22371--    object doesn't have a dynamic symbol table
--22371-- Reading syms from /lib64/ld-2.12.so
--22371-- Scheduler: using generic scheduler lock implementation.
--22371-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==22371== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-22371-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==22371== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-22371-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==22371== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-22371-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==22371== 
==22371== TO CONTROL THIS PROCESS USING vgdb (which you probably
==22371== don't want to do, unless you know exactly what you're doing,
==22371== or are doing some strange experiment):
==22371==   /usr/lib64/valgrind/../../bin/vgdb --pid=22371 ...command...
==22371== 
==22371== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==22371==   /path/to/gdb /tmp/.rvsvEz/a.out
==22371== and then give GDB the following command
==22371==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=22371
==22371== --pid is optional if only one valgrind process is running
==22371== 
--22371-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--22371-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--22371-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--22371-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--22371-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--22371-- Reading syms from /lib64/libc-2.12.so
--22371-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--22371-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--22371-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--22371-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--22371-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--22371-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--22371-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--22371-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--22371-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
==22371== 
==22371== HEAP SUMMARY:
==22371==     in use at exit: 40 bytes in 1 blocks
==22371==   total heap usage: 5 allocs, 4 frees, 105 bytes allocated
==22371== 
==22371== Searching for pointers to 1 not-freed blocks
==22371== Checked 64,696 bytes
==22371== 
==22371== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
==22371==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==22371==    by 0x401D99: create_node (answer09.c:46)
==22371==    by 0x401E17: tree_insert (answer09.c:59)
==22371==    by 0x4019EF: test_insert_null (<stdin>:400)
==22371==    by 0x401B1A: main (<stdin>:428)
==22371== 
==22371== LEAK SUMMARY:
==22371==    definitely lost: 40 bytes in 1 blocks
==22371==    indirectly lost: 0 bytes in 0 blocks
==22371==      possibly lost: 0 bytes in 0 blocks
==22371==    still reachable: 0 bytes in 0 blocks
==22371==         suppressed: 0 bytes in 0 blocks
==22371== 
==22371== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
--22371-- 
--22371-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--22371-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==22371== 
==22371== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 8 :: testing the tree_search_name function: Looking for: Pine Cone Restaurant

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Pine Cone Restaurant",root);
   (pass.)

test 9 :: testing the tree_search_name function: Looking for: Full Circle Auto Wash

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Full Circle Auto Wash",root);
Memory errors detected, testcase failed.
==25568== Memcheck, a memory error detector
==25568== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==25568== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==25568== Command: /tmp/.rvsvEz/a.out 8
==25568== Parent PID: 25566
==25568== 
--25568-- 
--25568-- Valgrind options:
--25568--    --tool=memcheck
--25568--    --leak-check=full
--25568--    --verbose
--25568--    --log-file=memcheck.log
--25568-- Contents of /proc/version:
--25568--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--25568-- Arch and hwcaps: AMD64, amd64-sse3
--25568-- Page sizes: currently 4096, max supported 4096
--25568-- Valgrind library directory: /usr/lib64/valgrind
--25568-- Reading syms from /tmp/.rvsvEz/a.out
--25568-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--25568--    object doesn't have a dynamic symbol table
--25568-- Reading syms from /lib64/ld-2.12.so
--25568-- Scheduler: using generic scheduler lock implementation.
--25568-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==25568== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-25568-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==25568== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-25568-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==25568== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-25568-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==25568== 
==25568== TO CONTROL THIS PROCESS USING vgdb (which you probably
==25568== don't want to do, unless you know exactly what you're doing,
==25568== or are doing some strange experiment):
==25568==   /usr/lib64/valgrind/../../bin/vgdb --pid=25568 ...command...
==25568== 
==25568== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==25568==   /path/to/gdb /tmp/.rvsvEz/a.out
==25568== and then give GDB the following command
==25568==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=25568
==25568== --pid is optional if only one valgrind process is running
==25568== 
--25568-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--25568-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--25568-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--25568-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--25568-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--25568-- Reading syms from /lib64/libc-2.12.so
--25568-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--25568-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--25568-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--25568-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--25568-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--25568-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--25568-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--25568-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--25568-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--25568-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--25568-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--25568-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--25568-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--25568-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
==25568== Invalid read of size 8
==25568==    at 0x402006: tree_search_name (answer09.c:109)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x40204F: tree_search_name (answer09.c:116)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x40204F: tree_search_name (answer09.c:116)
==25568==    by 0x401763: test_search (<stdin>:356)
==25568==    by 0x401B42: main (<stdin>:430)
==25568==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==25568== 
==25568== 
==25568== Process terminating with default action of signal 11 (SIGSEGV)
==25568==  Access not within mapped region at address 0x0
==25568==    at 0x402006: tree_search_name (answer09.c:109)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x40204F: tree_search_name (answer09.c:116)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x40204F: tree_search_name (answer09.c:116)
==25568==    by 0x401763: test_search (<stdin>:356)
==25568==    by 0x401B42: main (<stdin>:430)
==25568==  If you believe this happened as a result of a stack
==25568==  overflow in your program's main thread (unlikely but
==25568==  possible), you can try to increase the size of the
==25568==  main thread stack using the --main-stacksize= flag.
==25568==  The main thread stack size used in this run was 10485760.
==25568== 
==25568== HEAP SUMMARY:
==25568==     in use at exit: 4,653,538 bytes in 168,612 blocks
==25568==   total heap usage: 210,767 allocs, 42,155 frees, 5,667,826 bytes allocated
==25568== 
==25568== Searching for pointers to 168,612 not-freed blocks
==25568== Checked 4,249,072 bytes
==25568== 
==25568== LEAK SUMMARY:
==25568==    definitely lost: 0 bytes in 0 blocks
==25568==    indirectly lost: 0 bytes in 0 blocks
==25568==      possibly lost: 0 bytes in 0 blocks
==25568==    still reachable: 4,653,538 bytes in 168,612 blocks
==25568==         suppressed: 0 bytes in 0 blocks
==25568== Reachable blocks (those to which a pointer was found) are not shown.
==25568== To see them, rerun with: --leak-check=full --show-reachable=yes
==25568== 
==25568== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==25568== 
==25568== 1 errors in context 1 of 1:
==25568== Invalid read of size 8
==25568==    at 0x402006: tree_search_name (answer09.c:109)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x40204F: tree_search_name (answer09.c:116)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x402032: tree_search_name (answer09.c:111)
==25568==    by 0x40204F: tree_search_name (answer09.c:116)
==25568==    by 0x401763: test_search (<stdin>:356)
==25568==    by 0x401B42: main (<stdin>:430)
==25568==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==25568== 
--25568-- 
--25568-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--25568-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==25568== 
==25568== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 10 :: testing the tree_search_name function: Looking for: Oriental Supermarket

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Oriental Supermarket",root);
Memory errors detected, testcase failed.
==27572== Memcheck, a memory error detector
==27572== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==27572== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==27572== Command: /tmp/.rvsvEz/a.out 9
==27572== Parent PID: 27570
==27572== 
--27572-- 
--27572-- Valgrind options:
--27572--    --tool=memcheck
--27572--    --leak-check=full
--27572--    --verbose
--27572--    --log-file=memcheck.log
--27572-- Contents of /proc/version:
--27572--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--27572-- Arch and hwcaps: AMD64, amd64-sse3
--27572-- Page sizes: currently 4096, max supported 4096
--27572-- Valgrind library directory: /usr/lib64/valgrind
--27572-- Reading syms from /tmp/.rvsvEz/a.out
--27572-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--27572--    object doesn't have a dynamic symbol table
--27572-- Reading syms from /lib64/ld-2.12.so
--27572-- Scheduler: using generic scheduler lock implementation.
--27572-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==27572== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-27572-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==27572== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-27572-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==27572== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-27572-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==27572== 
==27572== TO CONTROL THIS PROCESS USING vgdb (which you probably
==27572== don't want to do, unless you know exactly what you're doing,
==27572== or are doing some strange experiment):
==27572==   /usr/lib64/valgrind/../../bin/vgdb --pid=27572 ...command...
==27572== 
==27572== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==27572==   /path/to/gdb /tmp/.rvsvEz/a.out
==27572== and then give GDB the following command
==27572==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=27572
==27572== --pid is optional if only one valgrind process is running
==27572== 
--27572-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--27572-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--27572-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--27572-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--27572-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--27572-- Reading syms from /lib64/libc-2.12.so
--27572-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--27572-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--27572-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--27572-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--27572-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--27572-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--27572-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--27572-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--27572-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--27572-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--27572-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--27572-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--27572-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--27572-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
==27572== Invalid read of size 8
==27572==    at 0x402006: tree_search_name (answer09.c:109)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==27572== 
==27572== 
==27572== Process terminating with default action of signal 11 (SIGSEGV)
==27572==  Access not within mapped region at address 0x0
==27572==    at 0x402006: tree_search_name (answer09.c:109)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==  If you believe this happened as a result of a stack
==27572==  overflow in your program's main thread (unlikely but
==27572==  possible), you can try to increase the size of the
==27572==  main thread stack using the --main-stacksize= flag.
==27572==  The main thread stack size used in this run was 10485760.
==27572== 
==27572== HEAP SUMMARY:
==27572==     in use at exit: 4,653,538 bytes in 168,612 blocks
==27572==   total heap usage: 210,767 allocs, 42,155 frees, 5,667,826 bytes allocated
==27572== 
==27572== Searching for pointers to 168,612 not-freed blocks
==27572== Checked 4,249,272 bytes
==27572== 
==27572== LEAK SUMMARY:
==27572==    definitely lost: 0 bytes in 0 blocks
==27572==    indirectly lost: 0 bytes in 0 blocks
==27572==      possibly lost: 0 bytes in 0 blocks
==27572==    still reachable: 4,653,538 bytes in 168,612 blocks
==27572==         suppressed: 0 bytes in 0 blocks
==27572== Reachable blocks (those to which a pointer was found) are not shown.
==27572== To see them, rerun with: --leak-check=full --show-reachable=yes
==27572== 
==27572== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==27572== 
==27572== 1 errors in context 1 of 1:
==27572== Invalid read of size 8
==27572==    at 0x402006: tree_search_name (answer09.c:109)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==    by 0x402032: tree_search_name (answer09.c:111)
==27572==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==27572== 
--27572-- 
--27572-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--27572-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==27572== 
==27572== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 11 :: testing the tree_search_name function: Looking for: Surfer Express Car Wash

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Surfer Express Car Wash",root);
Memory errors detected, testcase failed.
==29748== Memcheck, a memory error detector
==29748== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==29748== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==29748== Command: /tmp/.rvsvEz/a.out 10
==29748== Parent PID: 29746
==29748== 
--29748-- 
--29748-- Valgrind options:
--29748--    --tool=memcheck
--29748--    --leak-check=full
--29748--    --verbose
--29748--    --log-file=memcheck.log
--29748-- Contents of /proc/version:
--29748--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--29748-- Arch and hwcaps: AMD64, amd64-sse3
--29748-- Page sizes: currently 4096, max supported 4096
--29748-- Valgrind library directory: /usr/lib64/valgrind
--29748-- Reading syms from /tmp/.rvsvEz/a.out
--29748-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--29748--    object doesn't have a dynamic symbol table
--29748-- Reading syms from /lib64/ld-2.12.so
--29748-- Scheduler: using generic scheduler lock implementation.
--29748-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==29748== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-29748-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==29748== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-29748-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==29748== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-29748-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==29748== 
==29748== TO CONTROL THIS PROCESS USING vgdb (which you probably
==29748== don't want to do, unless you know exactly what you're doing,
==29748== or are doing some strange experiment):
==29748==   /usr/lib64/valgrind/../../bin/vgdb --pid=29748 ...command...
==29748== 
==29748== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==29748==   /path/to/gdb /tmp/.rvsvEz/a.out
==29748== and then give GDB the following command
==29748==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=29748
==29748== --pid is optional if only one valgrind process is running
==29748== 
--29748-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--29748-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--29748-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--29748-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--29748-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--29748-- Reading syms from /lib64/libc-2.12.so
--29748-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--29748-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--29748-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--29748-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--29748-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--29748-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--29748-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--29748-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--29748-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--29748-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--29748-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--29748-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--29748-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--29748-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
==29748== Invalid read of size 8
==29748==    at 0x402006: tree_search_name (answer09.c:109)
==29748==    by 0x40204F: tree_search_name (answer09.c:116)
==29748==    by 0x40204F: tree_search_name (answer09.c:116)
==29748==    by 0x40204F: tree_search_name (answer09.c:116)
==29748==    by 0x401763: test_search (<stdin>:356)
==29748==    by 0x401B67: main (<stdin>:432)
==29748==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==29748== 
==29748== 
==29748== Process terminating with default action of signal 11 (SIGSEGV)
==29748==  Access not within mapped region at address 0x0
==29748==    at 0x402006: tree_search_name (answer09.c:109)
==29748==    by 0x40204F: tree_search_name (answer09.c:116)
==29748==    by 0x40204F: tree_search_name (answer09.c:116)
==29748==    by 0x40204F: tree_search_name (answer09.c:116)
==29748==    by 0x401763: test_search (<stdin>:356)
==29748==    by 0x401B67: main (<stdin>:432)
==29748==  If you believe this happened as a result of a stack
==29748==  overflow in your program's main thread (unlikely but
==29748==  possible), you can try to increase the size of the
==29748==  main thread stack using the --main-stacksize= flag.
==29748==  The main thread stack size used in this run was 10485760.
==29748== 
==29748== HEAP SUMMARY:
==29748==     in use at exit: 4,653,538 bytes in 168,612 blocks
==29748==   total heap usage: 210,767 allocs, 42,155 frees, 5,667,826 bytes allocated
==29748== 
==29748== Searching for pointers to 168,612 not-freed blocks
==29748== Checked 4,248,872 bytes
==29748== 
==29748== LEAK SUMMARY:
==29748==    definitely lost: 0 bytes in 0 blocks
==29748==    indirectly lost: 0 bytes in 0 blocks
==29748==      possibly lost: 0 bytes in 0 blocks
==29748==    still reachable: 4,653,538 bytes in 168,612 blocks
==29748==         suppressed: 0 bytes in 0 blocks
==29748== Reachable blocks (those to which a pointer was found) are not shown.
==29748== To see them, rerun with: --leak-check=full --show-reachable=yes
==29748== 
==29748== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==29748== 
==29748== 1 errors in context 1 of 1:
==29748== Invalid read of size 8
==29748==    at 0x402006: tree_search_name (answer09.c:109)
==29748==    by 0x40204F: tree_search_name (answer09.c:116)
==29748==    by 0x40204F: tree_search_name (answer09.c:116)
==29748==    by 0x40204F: tree_search_name (answer09.c:116)
==29748==    by 0x401763: test_search (<stdin>:356)
==29748==    by 0x401B67: main (<stdin>:432)
==29748==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==29748== 
--29748-- 
--29748-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--29748-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==29748== 
==29748== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 12 :: testing the tree_search_name function: Looking for: Dennis' Special Shop

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Dennis' Special Shop",root);
Memory errors detected, testcase failed.
==31984== Memcheck, a memory error detector
==31984== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==31984== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==31984== Command: /tmp/.rvsvEz/a.out 11
==31984== Parent PID: 31981
==31984== 
--31984-- 
--31984-- Valgrind options:
--31984--    --tool=memcheck
--31984--    --leak-check=full
--31984--    --verbose
--31984--    --log-file=memcheck.log
--31984-- Contents of /proc/version:
--31984--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--31984-- Arch and hwcaps: AMD64, amd64-sse3
--31984-- Page sizes: currently 4096, max supported 4096
--31984-- Valgrind library directory: /usr/lib64/valgrind
--31984-- Reading syms from /tmp/.rvsvEz/a.out
--31984-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--31984--    object doesn't have a dynamic symbol table
--31984-- Reading syms from /lib64/ld-2.12.so
--31984-- Scheduler: using generic scheduler lock implementation.
--31984-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==31984== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-31984-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==31984== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-31984-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==31984== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-31984-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==31984== 
==31984== TO CONTROL THIS PROCESS USING vgdb (which you probably
==31984== don't want to do, unless you know exactly what you're doing,
==31984== or are doing some strange experiment):
==31984==   /usr/lib64/valgrind/../../bin/vgdb --pid=31984 ...command...
==31984== 
==31984== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==31984==   /path/to/gdb /tmp/.rvsvEz/a.out
==31984== and then give GDB the following command
==31984==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=31984
==31984== --pid is optional if only one valgrind process is running
==31984== 
--31984-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--31984-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--31984-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--31984-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--31984-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--31984-- Reading syms from /lib64/libc-2.12.so
--31984-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--31984-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--31984-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--31984-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--31984-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--31984-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--31984-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--31984-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--31984-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--31984-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--31984-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--31984-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--31984-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--31984-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
==31984== Invalid read of size 8
==31984==    at 0x402006: tree_search_name (answer09.c:109)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x40204F: tree_search_name (answer09.c:116)
==31984==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==31984== 
==31984== 
==31984== Process terminating with default action of signal 11 (SIGSEGV)
==31984==  Access not within mapped region at address 0x0
==31984==    at 0x402006: tree_search_name (answer09.c:109)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x40204F: tree_search_name (answer09.c:116)
==31984==  If you believe this happened as a result of a stack
==31984==  overflow in your program's main thread (unlikely but
==31984==  possible), you can try to increase the size of the
==31984==  main thread stack using the --main-stacksize= flag.
==31984==  The main thread stack size used in this run was 10485760.
==31984== 
==31984== HEAP SUMMARY:
==31984==     in use at exit: 4,653,538 bytes in 168,612 blocks
==31984==   total heap usage: 210,767 allocs, 42,155 frees, 5,667,826 bytes allocated
==31984== 
==31984== Searching for pointers to 168,612 not-freed blocks
==31984== Checked 4,249,192 bytes
==31984== 
==31984== LEAK SUMMARY:
==31984==    definitely lost: 0 bytes in 0 blocks
==31984==    indirectly lost: 0 bytes in 0 blocks
==31984==      possibly lost: 0 bytes in 0 blocks
==31984==    still reachable: 4,653,538 bytes in 168,612 blocks
==31984==         suppressed: 0 bytes in 0 blocks
==31984== Reachable blocks (those to which a pointer was found) are not shown.
==31984== To see them, rerun with: --leak-check=full --show-reachable=yes
==31984== 
==31984== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==31984== 
==31984== 1 errors in context 1 of 1:
==31984== Invalid read of size 8
==31984==    at 0x402006: tree_search_name (answer09.c:109)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x402032: tree_search_name (answer09.c:111)
==31984==    by 0x40204F: tree_search_name (answer09.c:116)
==31984==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==31984== 
--31984-- 
--31984-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--31984-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==31984== 
==31984== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 13 :: testing the tree_search_name function: Looking for: Purdue University

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Purdue University",root);
Memory errors detected, testcase failed.
==2003== Memcheck, a memory error detector
==2003== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==2003== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==2003== Command: /tmp/.rvsvEz/a.out 12
==2003== Parent PID: 1999
==2003== 
--2003-- 
--2003-- Valgrind options:
--2003--    --tool=memcheck
--2003--    --leak-check=full
--2003--    --verbose
--2003--    --log-file=memcheck.log
--2003-- Contents of /proc/version:
--2003--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--2003-- Arch and hwcaps: AMD64, amd64-sse3
--2003-- Page sizes: currently 4096, max supported 4096
--2003-- Valgrind library directory: /usr/lib64/valgrind
--2003-- Reading syms from /tmp/.rvsvEz/a.out
--2003-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--2003--    object doesn't have a dynamic symbol table
--2003-- Reading syms from /lib64/ld-2.12.so
--2003-- Scheduler: using generic scheduler lock implementation.
--2003-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==2003== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-2003-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==2003== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-2003-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==2003== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-2003-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==2003== 
==2003== TO CONTROL THIS PROCESS USING vgdb (which you probably
==2003== don't want to do, unless you know exactly what you're doing,
==2003== or are doing some strange experiment):
==2003==   /usr/lib64/valgrind/../../bin/vgdb --pid=2003 ...command...
==2003== 
==2003== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==2003==   /path/to/gdb /tmp/.rvsvEz/a.out
==2003== and then give GDB the following command
==2003==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=2003
==2003== --pid is optional if only one valgrind process is running
==2003== 
--2003-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--2003-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--2003-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--2003-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--2003-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--2003-- Reading syms from /lib64/libc-2.12.so
--2003-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--2003-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--2003-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--2003-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--2003-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--2003-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--2003-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--2003-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--2003-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--2003-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--2003-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--2003-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--2003-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--2003-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
==2003== Invalid read of size 8
==2003==    at 0x402006: tree_search_name (answer09.c:109)
==2003==    by 0x40204F: tree_search_name (answer09.c:116)
==2003==    by 0x40204F: tree_search_name (answer09.c:116)
==2003==    by 0x40204F: tree_search_name (answer09.c:116)
==2003==    by 0x401763: test_search (<stdin>:356)
==2003==    by 0x401B89: main (<stdin>:434)
==2003==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2003== 
==2003== 
==2003== Process terminating with default action of signal 11 (SIGSEGV)
==2003==  Access not within mapped region at address 0x0
==2003==    at 0x402006: tree_search_name (answer09.c:109)
==2003==    by 0x40204F: tree_search_name (answer09.c:116)
==2003==    by 0x40204F: tree_search_name (answer09.c:116)
==2003==    by 0x40204F: tree_search_name (answer09.c:116)
==2003==    by 0x401763: test_search (<stdin>:356)
==2003==    by 0x401B89: main (<stdin>:434)
==2003==  If you believe this happened as a result of a stack
==2003==  overflow in your program's main thread (unlikely but
==2003==  possible), you can try to increase the size of the
==2003==  main thread stack using the --main-stacksize= flag.
==2003==  The main thread stack size used in this run was 10485760.
==2003== 
==2003== HEAP SUMMARY:
==2003==     in use at exit: 4,653,538 bytes in 168,612 blocks
==2003==   total heap usage: 210,767 allocs, 42,155 frees, 5,667,826 bytes allocated
==2003== 
==2003== Searching for pointers to 168,612 not-freed blocks
==2003== Checked 4,248,872 bytes
==2003== 
==2003== LEAK SUMMARY:
==2003==    definitely lost: 0 bytes in 0 blocks
==2003==    indirectly lost: 0 bytes in 0 blocks
==2003==      possibly lost: 0 bytes in 0 blocks
==2003==    still reachable: 4,653,538 bytes in 168,612 blocks
==2003==         suppressed: 0 bytes in 0 blocks
==2003== Reachable blocks (those to which a pointer was found) are not shown.
==2003== To see them, rerun with: --leak-check=full --show-reachable=yes
==2003== 
==2003== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==2003== 
==2003== 1 errors in context 1 of 1:
==2003== Invalid read of size 8
==2003==    at 0x402006: tree_search_name (answer09.c:109)
==2003==    by 0x40204F: tree_search_name (answer09.c:116)
==2003==    by 0x40204F: tree_search_name (answer09.c:116)
==2003==    by 0x40204F: tree_search_name (answer09.c:116)
==2003==    by 0x401763: test_search (<stdin>:356)
==2003==    by 0x401B89: main (<stdin>:434)
==2003==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2003== 
--2003-- 
--2003-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--2003-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==2003== 
==2003== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 14 :: testing the tree_search_name function: Looking for: Vinny-Boy's Italian Market Place

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Vinny-Boy's Italian Market Place",root);
Memory errors detected, testcase failed.
==4478== Memcheck, a memory error detector
==4478== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==4478== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==4478== Command: /tmp/.rvsvEz/a.out 13
==4478== Parent PID: 4474
==4478== 
--4478-- 
--4478-- Valgrind options:
--4478--    --tool=memcheck
--4478--    --leak-check=full
--4478--    --verbose
--4478--    --log-file=memcheck.log
--4478-- Contents of /proc/version:
--4478--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--4478-- Arch and hwcaps: AMD64, amd64-sse3
--4478-- Page sizes: currently 4096, max supported 4096
--4478-- Valgrind library directory: /usr/lib64/valgrind
--4478-- Reading syms from /tmp/.rvsvEz/a.out
--4478-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--4478--    object doesn't have a dynamic symbol table
--4478-- Reading syms from /lib64/ld-2.12.so
--4478-- Scheduler: using generic scheduler lock implementation.
--4478-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==4478== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-4478-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==4478== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-4478-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==4478== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-4478-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==4478== 
==4478== TO CONTROL THIS PROCESS USING vgdb (which you probably
==4478== don't want to do, unless you know exactly what you're doing,
==4478== or are doing some strange experiment):
==4478==   /usr/lib64/valgrind/../../bin/vgdb --pid=4478 ...command...
==4478== 
==4478== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==4478==   /path/to/gdb /tmp/.rvsvEz/a.out
==4478== and then give GDB the following command
==4478==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=4478
==4478== --pid is optional if only one valgrind process is running
==4478== 
--4478-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--4478-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--4478-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--4478-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--4478-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--4478-- Reading syms from /lib64/libc-2.12.so
--4478-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--4478-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--4478-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--4478-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--4478-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--4478-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--4478-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--4478-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--4478-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--4478-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--4478-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--4478-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--4478-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--4478-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
==4478== Invalid read of size 8
==4478==    at 0x402006: tree_search_name (answer09.c:109)
==4478==    by 0x40204F: tree_search_name (answer09.c:116)
==4478==    by 0x40204F: tree_search_name (answer09.c:116)
==4478==    by 0x40204F: tree_search_name (answer09.c:116)
==4478==    by 0x401763: test_search (<stdin>:356)
==4478==    by 0x401B9A: main (<stdin>:435)
==4478==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4478== 
==4478== 
==4478== Process terminating with default action of signal 11 (SIGSEGV)
==4478==  Access not within mapped region at address 0x0
==4478==    at 0x402006: tree_search_name (answer09.c:109)
==4478==    by 0x40204F: tree_search_name (answer09.c:116)
==4478==    by 0x40204F: tree_search_name (answer09.c:116)
==4478==    by 0x40204F: tree_search_name (answer09.c:116)
==4478==    by 0x401763: test_search (<stdin>:356)
==4478==    by 0x401B9A: main (<stdin>:435)
==4478==  If you believe this happened as a result of a stack
==4478==  overflow in your program's main thread (unlikely but
==4478==  possible), you can try to increase the size of the
==4478==  main thread stack using the --main-stacksize= flag.
==4478==  The main thread stack size used in this run was 10485760.
==4478== 
==4478== HEAP SUMMARY:
==4478==     in use at exit: 4,653,538 bytes in 168,612 blocks
==4478==   total heap usage: 210,767 allocs, 42,155 frees, 5,667,826 bytes allocated
==4478== 
==4478== Searching for pointers to 168,612 not-freed blocks
==4478== Checked 4,248,872 bytes
==4478== 
==4478== LEAK SUMMARY:
==4478==    definitely lost: 0 bytes in 0 blocks
==4478==    indirectly lost: 0 bytes in 0 blocks
==4478==      possibly lost: 0 bytes in 0 blocks
==4478==    still reachable: 4,653,538 bytes in 168,612 blocks
==4478==         suppressed: 0 bytes in 0 blocks
==4478== Reachable blocks (those to which a pointer was found) are not shown.
==4478== To see them, rerun with: --leak-check=full --show-reachable=yes
==4478== 
==4478== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==4478== 
==4478== 1 errors in context 1 of 1:
==4478== Invalid read of size 8
==4478==    at 0x402006: tree_search_name (answer09.c:109)
==4478==    by 0x40204F: tree_search_name (answer09.c:116)
==4478==    by 0x40204F: tree_search_name (answer09.c:116)
==4478==    by 0x40204F: tree_search_name (answer09.c:116)
==4478==    by 0x401763: test_search (<stdin>:356)
==4478==    by 0x401B9A: main (<stdin>:435)
==4478==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==4478== 
--4478-- 
--4478-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--4478-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==4478== 
==4478== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 15 :: testing the tree_search_name function: Looking for: Mando's Mexican Food

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Mando's Mexican Food",root);
Memory errors detected, testcase failed.
==6761== Memcheck, a memory error detector
==6761== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==6761== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==6761== Command: /tmp/.rvsvEz/a.out 14
==6761== Parent PID: 6760
==6761== 
--6761-- 
--6761-- Valgrind options:
--6761--    --tool=memcheck
--6761--    --leak-check=full
--6761--    --verbose
--6761--    --log-file=memcheck.log
--6761-- Contents of /proc/version:
--6761--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--6761-- Arch and hwcaps: AMD64, amd64-sse3
--6761-- Page sizes: currently 4096, max supported 4096
--6761-- Valgrind library directory: /usr/lib64/valgrind
--6761-- Reading syms from /tmp/.rvsvEz/a.out
--6761-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--6761--    object doesn't have a dynamic symbol table
--6761-- Reading syms from /lib64/ld-2.12.so
--6761-- Scheduler: using generic scheduler lock implementation.
--6761-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==6761== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-6761-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==6761== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-6761-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==6761== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-6761-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==6761== 
==6761== TO CONTROL THIS PROCESS USING vgdb (which you probably
==6761== don't want to do, unless you know exactly what you're doing,
==6761== or are doing some strange experiment):
==6761==   /usr/lib64/valgrind/../../bin/vgdb --pid=6761 ...command...
==6761== 
==6761== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==6761==   /path/to/gdb /tmp/.rvsvEz/a.out
==6761== and then give GDB the following command
==6761==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=6761
==6761== --pid is optional if only one valgrind process is running
==6761== 
--6761-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--6761-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--6761-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--6761-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--6761-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--6761-- Reading syms from /lib64/libc-2.12.so
--6761-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6761-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6761-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--6761-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--6761-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--6761-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--6761-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--6761-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--6761-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--6761-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--6761-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6761-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--6761-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--6761-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
==6761== Invalid read of size 8
==6761==    at 0x402006: tree_search_name (answer09.c:109)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x40204F: tree_search_name (answer09.c:116)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x40204F: tree_search_name (answer09.c:116)
==6761==    by 0x401763: test_search (<stdin>:356)
==6761==    by 0x401BAB: main (<stdin>:436)
==6761==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6761== 
==6761== 
==6761== Process terminating with default action of signal 11 (SIGSEGV)
==6761==  Access not within mapped region at address 0x0
==6761==    at 0x402006: tree_search_name (answer09.c:109)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x40204F: tree_search_name (answer09.c:116)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x40204F: tree_search_name (answer09.c:116)
==6761==    by 0x401763: test_search (<stdin>:356)
==6761==    by 0x401BAB: main (<stdin>:436)
==6761==  If you believe this happened as a result of a stack
==6761==  overflow in your program's main thread (unlikely but
==6761==  possible), you can try to increase the size of the
==6761==  main thread stack using the --main-stacksize= flag.
==6761==  The main thread stack size used in this run was 10485760.
==6761== 
==6761== HEAP SUMMARY:
==6761==     in use at exit: 4,653,538 bytes in 168,612 blocks
==6761==   total heap usage: 210,767 allocs, 42,155 frees, 5,667,826 bytes allocated
==6761== 
==6761== Searching for pointers to 168,612 not-freed blocks
==6761== Checked 4,248,992 bytes
==6761== 
==6761== LEAK SUMMARY:
==6761==    definitely lost: 0 bytes in 0 blocks
==6761==    indirectly lost: 0 bytes in 0 blocks
==6761==      possibly lost: 0 bytes in 0 blocks
==6761==    still reachable: 4,653,538 bytes in 168,612 blocks
==6761==         suppressed: 0 bytes in 0 blocks
==6761== Reachable blocks (those to which a pointer was found) are not shown.
==6761== To see them, rerun with: --leak-check=full --show-reachable=yes
==6761== 
==6761== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
==6761== 
==6761== 1 errors in context 1 of 1:
==6761== Invalid read of size 8
==6761==    at 0x402006: tree_search_name (answer09.c:109)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x40204F: tree_search_name (answer09.c:116)
==6761==    by 0x402032: tree_search_name (answer09.c:111)
==6761==    by 0x40204F: tree_search_name (answer09.c:116)
==6761==    by 0x401763: test_search (<stdin>:356)
==6761==    by 0x401BAB: main (<stdin>:436)
==6761==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==6761== 
--6761-- 
--6761-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--6761-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==6761== 
==6761== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)


3/15 testcases passed.
Overall mark is a FAIL.
