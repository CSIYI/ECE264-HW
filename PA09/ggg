   ---------------------------------------------------------------------------
   Welcome to the PA09 testing program. This program takes a _long_ time
   to execute. There is a reason for this. You should not rely on this
   program to test your code as you go. Instead, you should think about
   what your code should be doing, and what inputs should produce what
   outputs for each of your functions.
   
        YOU SHOULD THEN TEST EVERY PIECE OF CODE AS YOU WRITE IT 
   
                                 AND 
   
                        FIX MISTAKES AS YOU GO.
   
   When you are convinced that you have the entire assignment 100%% correct,
   then you can use this testing program to test it. 
   
   This will give you your mark assuming that you submit it correctly, and 
   there are no other irregularities.
   ---------------------------------------------------------------------------

test 1 :: passing incorrect filename to load_tree_from_file()

	char * filename = "carzyfilename";
	BusinessNode * root;
	root = load_tree_from_file(filename);

   (pass.)
Memory errors detected, testcase failed.
==23689== Memcheck, a memory error detector
==23689== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==23689== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==23689== Command: /tmp/.59dkwb/a.out 0
==23689== Parent PID: 23687
==23689== 
--23689-- 
--23689-- Valgrind options:
--23689--    --tool=memcheck
--23689--    --leak-check=full
--23689--    --verbose
--23689--    --log-file=memcheck.log
--23689-- Contents of /proc/version:
--23689--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--23689-- Arch and hwcaps: AMD64, amd64-sse3
--23689-- Page sizes: currently 4096, max supported 4096
--23689-- Valgrind library directory: /usr/lib64/valgrind
--23689-- Reading syms from /tmp/.59dkwb/a.out
--23689-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--23689--    object doesn't have a dynamic symbol table
--23689-- Reading syms from /lib64/ld-2.12.so
--23689-- Scheduler: using generic scheduler lock implementation.
--23689-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==23689== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-23689-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==23689== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-23689-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==23689== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-23689-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==23689== 
==23689== TO CONTROL THIS PROCESS USING vgdb (which you probably
==23689== don't want to do, unless you know exactly what you're doing,
==23689== or are doing some strange experiment):
==23689==   /usr/lib64/valgrind/../../bin/vgdb --pid=23689 ...command...
==23689== 
==23689== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==23689==   /path/to/gdb /tmp/.59dkwb/a.out
==23689== and then give GDB the following command
==23689==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=23689
==23689== --pid is optional if only one valgrind process is running
==23689== 
--23689-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--23689-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--23689-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--23689-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--23689-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--23689-- Reading syms from /lib64/libc-2.12.so
--23689-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--23689-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--23689-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--23689-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--23689-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--23689-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--23689-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--23689-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
==23689== 
==23689== HEAP SUMMARY:
==23689==     in use at exit: 2,048 bytes in 1 blocks
==23689==   total heap usage: 2 allocs, 1 frees, 2,616 bytes allocated
==23689== 
==23689== Searching for pointers to 1 not-freed blocks
==23689== Checked 64,696 bytes
==23689== 
==23689== 2,048 bytes in 1 blocks are definitely lost in loss record 1 of 1
==23689==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==23689==    by 0x401EB8: load_tree_from_file (answer09.c:78)
==23689==    by 0x401073: test_fileopen (<stdin>:211)
==23689==    by 0x401AC0: main (<stdin>:422)
==23689== 
==23689== LEAK SUMMARY:
==23689==    definitely lost: 2,048 bytes in 1 blocks
==23689==    indirectly lost: 0 bytes in 0 blocks
==23689==      possibly lost: 0 bytes in 0 blocks
==23689==    still reachable: 0 bytes in 0 blocks
==23689==         suppressed: 0 bytes in 0 blocks
==23689== 
==23689== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
--23689-- 
--23689-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--23689-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==23689== 
==23689== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 2 :: testing destroy_tree()

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	destroy_tree(root);

   (pass.)

test 3 :: testing destroy_tree() when root is NULL

	BusinessNode * root = NULL
	destroy_tree(root);

   (pass.)

test 4 :: testing whether the tree is built correctly

	BusinessNode * tree = load_tree_from_file("yelp_businesses.tsv");
	compare_trees(tree, sol_tree);
Compare found one tree had children that the other tree did not!
Found NULL in students tree when expecting node:
1-800-Flowers
=============
Stars:
   1.0
Address:
   3385 S Durango Dr, Spring Valley, Las Vegas, NV 89117


   // Error, Tree is not built correctly.
	Check the README for instructions on how to build the tree correctly.

	destroy_tree(tree);

   Testcase FAILED
Memory errors detected, testcase failed.
==29214== Memcheck, a memory error detector
==29214== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==29214== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==29214== Command: /tmp/.59dkwb/a.out 3
==29214== Parent PID: 29212
==29214== 
--29214-- 
--29214-- Valgrind options:
--29214--    --tool=memcheck
--29214--    --leak-check=full
--29214--    --verbose
--29214--    --log-file=memcheck.log
--29214-- Contents of /proc/version:
--29214--   Linux version 2.6.32-431.29.2.el6.x86_64 (mockbuild@x86-026.build.eng.bos.redhat.com) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP Sun Jul 27 15:55:46 EDT 2014
--29214-- Arch and hwcaps: AMD64, amd64-sse3
--29214-- Page sizes: currently 4096, max supported 4096
--29214-- Valgrind library directory: /usr/lib64/valgrind
--29214-- Reading syms from /tmp/.59dkwb/a.out
--29214-- Reading syms from /usr/lib64/valgrind/memcheck-amd64-linux
--29214--    object doesn't have a dynamic symbol table
--29214-- Reading syms from /lib64/ld-2.12.so
--29214-- Scheduler: using generic scheduler lock implementation.
--29214-- Reading suppressions file: /usr/lib64/valgrind/default.supp
==29214== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-29214-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==29214== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-29214-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==29214== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-29214-by-cai71-on-ecegrid-thin6.ecn.purdue.edu
==29214== 
==29214== TO CONTROL THIS PROCESS USING vgdb (which you probably
==29214== don't want to do, unless you know exactly what you're doing,
==29214== or are doing some strange experiment):
==29214==   /usr/lib64/valgrind/../../bin/vgdb --pid=29214 ...command...
==29214== 
==29214== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==29214==   /path/to/gdb /tmp/.59dkwb/a.out
==29214== and then give GDB the following command
==29214==   target remote | /usr/lib64/valgrind/../../bin/vgdb --pid=29214
==29214== --pid is optional if only one valgrind process is running
==29214== 
--29214-- REDIR: 0x3822617610 (strlen) redirected to 0x38049551 (vgPlain_amd64_linux_REDIR_FOR_strlen)
--29214-- Reading syms from /usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--29214-- Reading syms from /usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
--29214-- REDIR: 0x3822617480 (index) redirected to 0x4a07c30 (index)
--29214-- REDIR: 0x3822617500 (strcmp) redirected to 0x4a08570 (strcmp)
--29214-- Reading syms from /lib64/libc-2.12.so
--29214-- REDIR: 0x3822a84cd0 (strcasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--29214-- REDIR: 0x3822a86f90 (strncasecmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--29214-- REDIR: 0x3822a82c40 (__GI_strrchr) redirected to 0x4a07ab0 (__GI_strrchr)
--29214-- REDIR: 0x3822a8aaf0 (strchrnul) redirected to 0x4a09fb0 (strchrnul)
--29214-- REDIR: 0x3822a84500 (mempcpy) redirected to 0x4a0a020 (mempcpy)
--29214-- REDIR: 0x3822a7b520 (free) redirected to 0x4a063a9 (free)
--29214-- REDIR: 0x3822a81160 (__GI_strlen) redirected to 0x4a07fb0 (__GI_strlen)
--29214-- REDIR: 0x3822a7a640 (malloc) redirected to 0x4a069ac (malloc)
--29214-- REDIR: 0x3822a83350 (memchr) redirected to 0x4a08610 (memchr)
--29214-- REDIR: 0x3822a89670 (memcpy) redirected to 0x4a08b60 (memcpy)
--29214-- REDIR: 0x3822a7f630 (index) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--29214-- REDIR: 0x3822a7f660 (__GI_strchr) redirected to 0x4a07b70 (__GI_strchr)
--29214-- REDIR: 0x3822a7f6e0 (strcmp) redirected to 0x480155c (_vgnU_ifunc_wrapper)
--29214-- REDIR: 0x3822a7f720 (__GI_strcmp) redirected to 0x4a08520 (__GI_strcmp)
--29214-- REDIR: 0x3822a81120 (strlen) redirected to 0x480155c (_vgnU_ifunc_wrapper)
==29214== 
==29214== HEAP SUMMARY:
==29214==     in use at exit: 1,199,595 bytes in 44,832 blocks
==29214==   total heap usage: 548,179 allocs, 503,347 frees, 14,307,226 bytes allocated
==29214== 
==29214== Searching for pointers to 44,832 not-freed blocks
==29214== Checked 64,696 bytes
==29214== 
==29214== 1,199,595 (448,320 direct, 751,275 indirect) bytes in 11,208 blocks are definitely lost in loss record 4 of 4
==29214==    at 0x4A06A2E: malloc (vg_replace_malloc.c:270)
==29214==    by 0x401D99: create_node (answer09.c:46)
==29214==    by 0x401F56: load_tree_from_file (answer09.c:89)
==29214==    by 0x4014ED: test_build (<stdin>:312)
==29214==    by 0x401AED: main (<stdin>:425)
==29214== 
==29214== LEAK SUMMARY:
==29214==    definitely lost: 448,320 bytes in 11,208 blocks
==29214==    indirectly lost: 751,275 bytes in 33,624 blocks
==29214==      possibly lost: 0 bytes in 0 blocks
==29214==    still reachable: 0 bytes in 0 blocks
==29214==         suppressed: 0 bytes in 0 blocks
==29214== 
==29214== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)
--29214-- 
--29214-- used_suppression:      4 U1004-ARM-_dl_relocate_object
--29214-- used_suppression:      2 glibc-2.5.x-on-SUSE-10.2-(PPC)-2a
==29214== 
==29214== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 6 from 6)

test 5 :: testing the create_node function.

	BusinessNode * node = create_node(strdup("5.0"), strdup("Purdue University Electrical Engineering"), strdup("465 Northwestern Avenue")
   (pass.)

test 6 :: testing the tree_insert function.

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = create_node(strdup("5.0"),strdup("test node"),strdup("no address"));
	BusinessNode * root = tree_insert(node,root);
   (pass.)

test 7 :: testing the tree_insert function: insert to NULL root.

	BusinessNode * root = NULL;
	BusinessNode * node = create_node(strdup("5.0"),strdup("test node"),strdup("no address"));
	BusinessNode * root = tree_insert(node,root);
   (pass.)

test 8 :: testing the tree_search_name function: Looking for: Pine Cone Restaurant

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Pine Cone Restaurant",root);
   (pass.)

test 9 :: testing the tree_search_name function: Looking for: Full Circle Auto Wash

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Full Circle Auto Wash",root);
   (pass.)

test 10 :: testing the tree_search_name function: Looking for: Oriental Supermarket

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Oriental Supermarket",root);
   (pass.)

test 11 :: testing the tree_search_name function: Looking for: Surfer Express Car Wash

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Surfer Express Car Wash",root);
   (pass.)

test 12 :: testing the tree_search_name function: Looking for: Dennis' Special Shop

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Dennis' Special Shop",root);
   (pass.)

test 13 :: testing the tree_search_name function: Looking for: Purdue University

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Purdue University",root);
   (pass.)

test 14 :: testing the tree_search_name function: Looking for: Vinny-Boy's Italian Market Place

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Vinny-Boy's Italian Market Place",root);
   (pass.)

test 15 :: testing the tree_search_name function: Looking for: Mando's Mexican Food

	BusinessNode * root = load_tree_from_file("yelp_businesses.tsv");
	BusinessNode * node = tree_search_name("Mando's Mexican Food",root);
   (pass.)


13/15 testcases passed.
Overall mark is a FAIL.
